echo Глава 17. Регулярные выражения
# Многие языки программирования и операционнные системы поддерживают регулярные выражения - 
# "последовательности симоволов, определяющие поисковый шаблон."
# Они могут быть полезны тем, что их можно использовать для выполнения поиска по сложным запросам в файлах или иных данных.
# К примеру, вы можете использовать регулярные выражения для поиска всех числе в файле.
echo Настройка
ls
python3 -c "import this" # Флаг -c сообщает Python, что вы собираетесь передать строку, 
# содержащую код Python
echo Сообщение, спрятанное в коде, называется пасхальным яйцом.
# Чтобы выйти из Python exit() 
echo Простое совпадение # По всей видимости в веб-версии bash не робит :(
# Команда grep принимает два значения - регулярное выражение и путь к файлу для содержимого
# по шаблону, определённому в регулярном выражении.
# Простейшим видом шаблона ляется простое совпадение, строка слов, совпадающая с такой же строкой слов.
grep Beautiful zen.txt # Если в этом примере поменять регистр букв в регулярном выражении, то 
# команда grep не найдёт совпадения.

# Чтобы не учитивать регистр букв, нужно добавить флаг -i
grep -i errors zen.txt
# По умолчанию команда grep выводит всю строку файла, в котором она нашла совпадение.

# Чтобы выводить только конкреные слова, совпадающие с переданным шаблоном, нужно добавить флаг -i
grep -o Beautiful zen.txt

# Далее смотреть в "Глава 17. Регулярные выражения.py"

echo Совпадение в начале и в конце
# Можно использовать регулярные выражения со сложныи шаблонами, добавив в них особые символы,
# которые не используются для поиска совпадени, а определяют правило.
# Можно использовать симовол коретки (^) для создания регулярного выражения, которое ищет шаблон, только если он встречается в начале строки.
grep ^If zen.txt
# Аналогично можно использовать символ доллара ($), чтобы использовать совпадения только в конце строки.
grep никогда.$ zen.txt
# В этом случае команда grep проигнорировала 2 строки, в которых было слово "никогда"

# Далее в файле Главы 17 с расширением py

echo Поиск совпадений с несколькими символами
# Чтобы определить шаблон для поиска совпадений с несколькими символами, поместите эти символы внутрь квадратных скобок в рег. выр.
echo Два даа. | grep -i д[ав]а # Здесь, вместо поиска совпадений в файле, bash, будет искать их в строке,
# которую добавляет вертикальная черта к команде grep

# В Python это делается так, как указано в Главе 17 с расширением py

echo Совпадение цифр
# С помощью значения [[:digit:]] можно искать совпадения цифр.
echo 123 хай 34 привет. | grep [[:digit:]] 

# В Python это делается так, как указано в Главе 17 с расширением py
 
echo Повторение
echo ту тууу ура. | grep -o ту*
# При помощи символа (*) можно найти предшествующий элемент "ноль или более раз"

# В регулярном выражении точка соответствует любому символу
echo __привет__всем | grep -o __.*__ # Можно использовать точку и звёздочку для всего, что находится в промежутке между 2 символами

# Регулярное выражене __.*__ находит все символы между двумя двойными подчёркиваниями, включая сами подчёркивания
# Символ (*) является жадным - это значит, что он попытается найти столько текста, сколько сможет.
# Если добавить больше слов с двойными подчёркиваниями, это рег. выр. найдёт се от первого до последнего подчёркивания.
echo __привет__всем__пока__лять__! | grep -o __.*__

# Для команды grep недоступен нежадный поиск, но в Python для этого можно использовать вопросительный знак.

# Далее в файле Главы 17 с расширением py

echo Управляющие символы
# Смотреть в файле Главы 17 с расширением py