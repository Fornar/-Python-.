# Файлы
print("Файлы".upper())
# С помощью Python можно считывать данные из файла и записывать данные в файл.
# Основы работы с файлами
#=================================================================================================================================
# Запись в файлы
# Чтобы избезать проблем с работой вашей программы в разных оперционных системах, пути к файлам всегда нужно создавать с помощью
# встроенного модуля Python os module
# Функция path этого модуля принимает в качестве параметра каждую папку из пути к файлу и выстраивает правильный путь к файлу.
import os
print(os.path.join("Users",
                   "user",
                   "Desktop",
                   "Программирование",
                   "Саша",
                   "Уроки - Сам себе Программист",
                   "st.txt"))

# Режим, который вы передаёте функции open, определяет действия, которые можно будет совершать с открываемым файлом:
## "r" - открывает файл только для чтения.
## "w" - открывает файл только для записи. Удаляет содержимое файла, если файл существует;
## если файл не существет, создаёт новый файл для записи.
## "w+" - открывает файл для чтения и записи. Удаляет содержимое файла, если файл существет;
## если файл не существет, создаёт новый файл для чтения и записи.
# Функция open возвращает так называемый файловый объект, который используется для чтения и/или записи в файл.
st = open("experiment1.txt", "w")
st.write("Я не заходил в этот файл, но его отредактировал.")
st.close() # При этом синтаксисе необходимо закрывать файл методом close

#_________________________________________________________________________________________________________________________________
# Автоматическое закрытие файлов
# Есть также второй вариант синтаксиса для открытия файлов, с ним не нужно деражть в памяти необходимость закрыть файлы.
# with - составная конструкция, автоматически выполняющая действие после того, как Python проходит её.
with open("experiment2.txt", "w") as f:
    f.write("Я не заходил в этот второй файл, но его отредактировал.")

#_________________________________________________________________________________________________________________________________
# Чтение из файлов
with open("experiment1.txt", "r") as f:
    print(f.read())

# Вызвать read, не закрывая и не открывая файл заново, можно лишь один раз, так что если понадобится содержимое файла позже,
# можно сохранить содержимое в переменной или контейнере.
my_list = list()

with open("experiment1.txt", "r") as f:
    my_list.append(f.read())

with open("experiment2.txt", "r") as f:
    my_list.append(f.read())

print(my_list)

#_________________________________________________________________________________________________________________________________
# CSV-файлы
# Python содержит встроенный модуль, позволяющий работать с CSV-файлами.
# CSV-файл имеет расширение .csv и содержит данные, разделённые с помощью запятых. (Comma Separated Values - значения, разделённые запятыми)
# Каждый фрагмент данных, отделённый запятой, представляет собой ячейку в электронной таблице, а каждая строка файла - строку в таблице.
# Разделителем выступает символ (например, запятая или вертикальная черта |), используемый для разделения данных в CSV-файле.
import csv

with open("st.csv", "w") as f:
    w = csv.writer(f, delimiter=",")
    w.writerow(["один",
                "два",
                "три"])
    w.writerow(["четыре",
                "пять",
                "шесть"])
    w.writerow(["семь",
                "восемь",
                "девять"])

# Модуль csv также можно использоватьдля чтения содержимого файла.
with open ("st.csv", "r") as f:
    r = csv.reader(f, delimiter=",")
    for row in r:
        print(", ".join(row))







