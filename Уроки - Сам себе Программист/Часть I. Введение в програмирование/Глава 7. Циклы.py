print("Циклы".upper())
# Циклы
#=================================================================================================================================
# Цикл for

# for-цикл - цикл, перебирующий объект. Процесс перебора называется итерированием.
# Цикл for можно использовать, чтобы определять инструкции,
# которые будут выполнятьс один раз для каждого элемента в итерируемом объекте,
# и с помощью таких инструкций вы можете получать доступ ко всем этим элементам и осуществлять операции с ними.
name = "Тед"
for character in name:  # character - имя переменной, которое назначается значению каждого элемента
    print(character)    # Каждый элемент строки перебирается 

# Пример использования цикла for для перебора элементов списка
for show in ["Во все тяжкие",
             "Секретные материалы",
             "Фарго"]:
    print(show)

# Пример использования цикла for для перебора элементов кортежа
coms = ("Теория большого взрыва",
        "Друзья",
        "Папины дочки")
for shows in coms:
    print(shows) # Можно через переменную, а можно сразу.

# Пример использования цикла for для перебора ключей в словаре
people = {"Джим Парсонс": "Теория большого взрыва",
          "Брайан Крэнстон": "Во все тяжкие",
          "Екатерина старшова": "Папины дочки"
}
for character in people:
    print(character)

# При помощи цикла for можно изменять элементы в изменяемом итерируемом объекте
tv =  ["Во все тяжкие",
       "Секретные материалы",
       "Фарго"]
i = 0
for show in tv: 
    new = tv[i]         # Можно использовать show как текущий элемент перебора
    new = new.upper()
    tv[i] = new         # переменная i нужна для замены элемента в списке
    i += 1
print(tv)

# В Python для получения к каждому элементу в итерируемом объуте и его индексу доступа есть специльный синтаксис:
tv =  ["Во все тяжкие",
       "Секретные материалы",
       "Фарго"]
for i, show in enumerate(tv):   # "i" - это индекс назначенного элемента, show - это назначенная переменная итерируемого объекта
    new = tv[i]
    newn = new.upper()
    tv[i] = new
print(tv)

# Циклы for можно использовать для перемещения данных между изменемыми итерируемыми объектами.
tv =  ["Во все тяжкие",
       "Секретные материалы",
       "Фарго"]
coms = ["Теория большого взрыва",
        "Друзья",
        "Папины дочки"]
all_shows = []

for show in tv:
    show = show.upper()
    all_shows.append(show)
for show in coms:
    show = show.upper()
    all_shows.append(show)

print(all_shows)

#_________________________________________________________________________________________________________________________________
# Функция range
# Можно использовать встроенную функцию range, чтобы создать последовательность целых чисел и цикл for, чтобы выполнить её перебор.
# Функция range принимает два параметра: число, с которого последовательность начинается, и число, на котором она заканчивается ДО.
for i in range(1, 11): # Часто программисты присваивают переменной, используемой для перебора списка целых чисел, имя i.
    print(i)

#_________________________________________________________________________________________________________________________________
# Циклы while
# Цикл while выполняет код до тех пор, пока выражение принимает истинно (True)
x = 10
while x > 0:
    print('{}'.format(x))
    x -= 1                # Если убрать выражение, то цикл станет бесконечным. Чтобы остановить его, нужно нажать Ctrl+C
print("Всё")

#_________________________________________________________________________________________________________________________________
# Инструкция break
# Инструкция break нужна, чтобы прекратить цикл.
for i in range(0, 100):
    print(i)
    break

# Можно использовать цикл while и ключевое слово break для написания программы-примера:
qs = ["Как тебя зовут?: ",
      "Твой любимый цвет?: ",
      "Что ты делаешь?: "]
n = 0
while True: # По сути бесконечный цикл
    print('Введи "Х" для выхода')
    a = "Х"         # input(qs[n])
    if a == "Х":
        break
    n = (n + 1) % 3

#_________________________________________________________________________________________________________________________________
# Инструкция continue
# Можно использовать инструкцию continue, чтобы прервать текущую итерацию цикла и продолжить со следующей итерции.
for i in range(1, 6):
    if i == 3:
        continue
    print(i)

# Аналогичного результата можно достичь при помощи цикла while и инструкции continue
i = 1
while i <= 5:
    if i == 3:
        i += 1
        continue
    print(i)
    i += 1

#_________________________________________________________________________________________________________________________________
# Вложенные циклы
# Нет ограничений по количеству циклов, которые можно помещать внутрь других циклов.
# Цикл, содержащий внунтри другой цикл, называется внешним, а вложенный цикл - внутренним.
# Внутренний цикл выполняет перебор своего итерируемого объекта за итерацию внешнего цикла.
for i in range(1, 3):
    print(i)
    for letter in ["а", "б", "в"]:
        print(letter)

# Можно использовать циулы for для прибавления каждого числа из одного списка к каждому числу из другого списка.
list1 = [1, 2, 3, 4]
list2 = [5, 6, 7, 8]
added = list()
for i in list1:
    for j in list2:
        added.append(i + j)

print(added)

# Можно вкладывать цикл for внутрь цикла while и наоборот.
while input('да или нет?: ') != 'нет':
    for i in range(1, 6):
        print(i)




















